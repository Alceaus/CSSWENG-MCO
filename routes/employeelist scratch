async function getEmployeeList(deploymentList){

    let projArr = [];
    for(let x = 0; x < deploymentList.length; x++){
        const employees = await db.collection('employees');
        const projects = await db.collection('projects');

        //console.log("LENGTH", comments.length);
        //console.log("COMMENTS" ,comments[x]);
        const employee = await users.findOne({id: comments[x].userID});
        //console.log("USER",user);

        const name = user.name;
        const image = user.image;
        const parentUser = comments[x].parent;
        const id = user.id;

        const arr = [name, image, parentUser, id]

        userArr.push(arr);
    }
    return userArr;
}

/*
NOTE: Do Sorting Algorithm
1. find currently selected project

    get it from the current route by doing this:
    router.get('/getCurrentProject', controller.getCurrentUser); in express
    
    the function:

        getCurrentUser: (req,res) =>{
        if(req.session.projectID){
            console.log("USER ID"+ req.session.projectID);
            res.status(200).send(req.session.projectID.toString());
        }else{
            res.sendStatus(400);
            console.log("Failed to get current user");
        }
    },

    to call the directory:
    const response = await fetch("/getCurrentUser", {
      method: "GET"
      })
  
      let currentUser = "";
  
      if(response.status == 200){
          currentUser = await response.text();
      }else{
          console.error(`An error has occured. Status code = ${response.status}`); 
      }
2. find its employees
    use empdeployment to connect them
3. display employees
    use GET to use render properties or post then redirect to self
*/
postSubmit.addEventListener('click', async (e) => {
    e.preventDefault();

    /*
    const postsCollection = await posts.find({isDeleted: false}).limit(pageLimit).toArray(function(err, documents) {
    
            if(err){
                console.error(err);
            }
        });
    */
    // get project title const title = document.querySelector('#titlepost').value;
    //const body = document.querySelector('#postbody').value;
    /*
    1. find currently selected project
        get it from the current route*/
        const response = await fetch("/getCurrentProject", {
            method: "GET",
            body: jString, //use this string as part of the data to be sent in the rendering of handlebar
            headers: {
                "Content-Type": "application/json"
            }
        });

        if(response.status == 200){
            console.log("Post success");
            const postID = await response.text()
            //window.location.href = "/postPage/"+postID; no need to change directory,
        }else
            console.error(`An error has occured. Status code = ${response.status}`);
            
        //find elements in empdeployment that has the current projectID
        const deploymentList = await comments.find({projectID: projectID}).toArray(function(err, documents) {
            if(err){
                console.error(err);
            }
        }); 



   
});

/*
He used this to load the posts in the feed upon render after logging in:
*/

loggedIn: async (req, res) => {
    console.log("Logged In Page loaded")

    pageIndex = 0;

    const posts = await db.collection('posts');

    const postsCollection = await posts.find({isDeleted: false}).limit(pageLimit).toArray(function(err, documents) {

        if(err){
            console.error(err);
        }
    });

    const users = await db.collection('users');
    const user = await users.findOne({id: parseInt(req.session.userID)});

    const testNext = await posts.find({isDeleted: false}).skip((pageIndex + 1) * pageLimit).limit(pageLimit).toArray(function (err, documents) {
        if (err) {
            console.error(err);
        }
    });

    if(testNext.length == 0)
        nextPage = false;
    else
        nextPage = true;

    if(pageIndex == 0)
        prevPage = false;
    else    
        prevPage = true;

    console.log(nextPage);
    console.log(prevPage);

    res.render("indexLogin", {
        title: "Login",
        script: "static/js/login.js",
        image: user.image,

        posts: postsCollection,
        nextPage: nextPage,
        prevPage: prevPage
    })
},

